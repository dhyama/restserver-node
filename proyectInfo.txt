/************************************
*    Documentación del proyecto     *
*************************************
- Generamos una cuenta en Github para tener nuestro codigo seguro en la nuve
    https://github.com

    usuario : dhyama@gmail.com

- Inicialización del proyecto para la creación del fichero package.json
npm init

- Instalamos el paquete Express para la generación de servicios (Documentación -> https://www.npmjs.com/package/express)
npm install express --save

- Creamos un carpeta especial para el los ficheros del servidor separado del resto de aplicación (Es una buena practica para aplicaciones grandes)
server/server.js

- Creamos los metodos http que se necesitan para la gestión del servicios
    * GET para la obtención de datos
    * POST para la creación de nuevos datos
    * PUT/PATCH para la actualización de datos
    * DELETE para marcar como borrado un registro (En BD ya no se borran los datos, se marcan como no disponibles)

- Instalamos el paquete body-parser para poder precesar los datos de las cabeceras de nuestro servicios
npm install body-parser --save

- Instalamos el paquete para la conexión con las BD de MongoDB
npm i mongoose --save

- Instalamos el paquete para colores en consola
npm install colors --save

- Creamos una carpeta donde tendremos definidos todos los controladores o rutas de acceso a nuestro servicio resto
routes/usuario.js

- Creamos una carpeta donde tendremos definidos todos los modelos de datos de nuestra base de datos de MongoDB
models/usuario.js

- Instalamos el paquete para validación de datos para la BD MondoDB (Documentación -> https://www.npmjs.com/package/mongoose-unique-validator)
npm i mongoose-unique-validator --save

- Instalamos el paquete para encriptación de contraseñas (Hash de una sola via) (Documentación -> https://www.npmjs.com/package/bcrypt)
npm i bcrypt --save

- Instalamos la libreria uderscore que amplia enormemente las funcionalidades de javascript (Documentación -> https://underscorejs.org/)
npm install underscore --save

- Generamos una cuenta en Mongo Atlas para poder tener nuestra BD en la nuve
    https://www.mongodb.com/cloud/atlas

    usuario : dhyama@gmail.com

    Creamos un cluster free 
    -Cluster0   usuario admin : dhyama , password : DJef7jwKOMdlrKP4

    Creamos una base de datos llamada 'cafe' en la colección del cluster

    -Conectamos Compass con el cluster de Atlas
    mongodb+srv://dhyama:DJef7jwKOMdlrKP4@cluster0-gqumd.mongodb.net/cafe


- Generamos una cuenta en Heroku para poder tener nuestra aplicación en la nuve
    https://dashboard.heroku.com

    usuario : dhyama@gmail.com

- Trabajaremos con tokens para la validación de usuarios en nuestra aplicación (Documentación - > https://jwt.io/)

    //Código para decodificar el token generado en jwt
    function parseJwt (token) {
        var base64Url = token.split('.')[1];
        var base64 = base64Url.replace('-', '+').replace('_', '/');
        return JSON.parse(window.atob(base64));
    };

    Los tokens almacenados en una máquina los podemos ver en las herramientas de desarrollo de google->Application->Local Storage

-Instalamos la libreria para la generación de tokens (Documentación -> https://www.npmjs.com/package/jsonwebtoken)
npm install jsonwebtoken --save

    - Mediante la función de login generamos un token que configuramos en postman como variable de entorno para utilizar en las llamadas al servicio
    - Función que añadimos a postman para actualizar los tokens del login en las variable globales, esta se incluye en la pestaña de test
        let resp = pm.response.json();
        let token;
        if (resp.ok) {
            token = resp.token; 
            pm.environment.set("token", token);
        }else{
            console.log('No se actualizó el token');
        }

- Creamos un proyecto de Google Sing-in para nuestra aplicación web.
    https://developers.google.com/identity/sign-in/web/sign-in

    usuario : dhyama@gmail.com
    proyecto: dhyamasingin
    OAuth   : Web browser
    Authorized Javascript Origin : http://localhost
    ClientID : 263151479469-4u8c04vnvo4e97d44hn7t70362a284ma.apps.googleusercontent.com
    Client Secret : Uoj5sywXo6RjCEoOQhSVb8VX

    https://console.developers.google.com/apis/dashboard?authuser=0&project=dhyamasingin-1570524859327

-Creamos una carpeta donde generar la interfaz grafica de la aplicación (Es independiente los que utilicemos Angular, React, etc)
public/index.html

-Instalamos la libreria para la validación mediante Sing-In de Google
npm install google-auth-library --save
